cmake_minimum_required(VERSION 3.16)
project(MyGame VERSION 1.0.0)
add_compile_options(-Wno-dev)


# Set C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED YES)
set(CMAKE_CXX_EXTENSIONS OFF)
set(DOWNLOAD_EXTRACT_TIMESTAMP true)

include(ExternalProject)

# Set SDL2 version and download URL
set(SDL2_VERSION "2.0.0")
set(SDL2_URL "https://www.libsdl.org/release/SDL2-${SDL2_VERSION}.tar.gz")

# Configure and build SDL2 as an external project
ExternalProject_Add(SDL2
  URL ${SDL2_URL}
  PREFIX ${CMAKE_CURRENT_BINARY_DIR}/SDL2
  CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
             -DCMAKE_BUILD_TYPE=Release
             -DBUILD_SHARED_LIBS=OFF
)

# Get the include directory of SDL2
ExternalProject_Get_Property(SDL2 SOURCE_DIR)
set(SDL2_INCLUDE_DIR ${SOURCE_DIR}/include)

# Add all .cc files in the src directory to the SOURCES variable
file(GLOB SOURCES src/*.cc)

# Include the directory containing header files
include_directories(include)

# Add the include directory to the target
add_executable(MyGame ${SOURCES})
target_include_directories(MyGame PRIVATE ${SDL2_INCLUDE_DIR})

# Link SDL2 library
find_library(SDL2_LIBRARY SDL2 PATHS ${CMAKE_CURRENT_BINARY_DIR}/SDL2_install/lib)
target_link_libraries(MyGame ${SDL2_LIBRARY})

# Set RPATH for the executable
set_target_properties(MyGame PROPERTIES
    INSTALL_RPATH "@executable_path/../Frameworks/SDL2"
)

